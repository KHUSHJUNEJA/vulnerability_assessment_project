#!/usr/bin/env python3
import requests
import xml.etree.ElementTree as ET
import json
import time

# Function to authenticate to OpenVAS (GVM) API
def gvm_login(url, username, password):
    headers = {'Content-Type': 'application/xml'}
    
    login_request = f'''
    <authenticate>
      <credentials>
        <username>{username}</username>
        <password>{password}</password>
      </credentials>
    </authenticate>
    '''
    
    response = requests.post(f'{url}/login', data=login_request, headers=headers)
    root = ET.fromstring(response.text)
    status = root.find('.//status').text
    
    if status == '200':
        print("Login successful!")
        token = root.find('.//token').text
        return token
    else:
        print(f"Login failed: {root.find('.//status_text').text}")
        return None

# Function to start OpenVAS scan on the target
def start_openvas_scan(url, token, target):
    headers = {
        'Content-Type': 'application/xml',
        'Authorization': f'Bearer {token}'
    }
    
    start_scan_request = f'''
    <create_task>
      <name>Python Automated Scan</name>
      <comment>Automated scan started from Python script</comment>
      <config id="daba56c8-73ec-11df-a475-002264764cea"/> 
      <target id="{target}"/>
    </create_task>
    '''
    
    response = requests.post(f'{url}/create_task', data=start_scan_request, headers=headers)
    root = ET.fromstring(response.text)
    
    status = root.find('.//status').text
    if status == '201':
        print("Scan started successfully!")
        task_id = root.find('.//id').text
        return task_id
    else:
        print(f"Failed to start scan: {root.find('.//status_text').text}")
        return None

# Function to check scan status and wait for completion
def check_scan_status(url, token, task_id):
    headers = {
        'Content-Type': 'application/xml',
        'Authorization': f'Bearer {token}'
    }
    
    while True:
        status_request = f'''
        <get_tasks>
          <task id="{task_id}"/>
        </get_tasks>
        '''
        
        response = requests.post(f'{url}/get_tasks', data=status_request, headers=headers)
        root = ET.fromstring(response.text)
        
        status = root.find('.//status').text
        progress = root.find('.//progress').text

        if status == '200' and progress == '100':
            print("Scan completed successfully!")
            return True
        else:
            print(f"Scan is still running... {progress}% complete.")
            time.sleep(10)  # Poll every 10 seconds

# Function to get the scan report
def get_scan_report(url, token, task_id):
    headers = {
        'Content-Type': 'application/xml',
        'Authorization': f'Bearer {token}'
    }
    
    report_request = f'''
    <get_reports>
      <task id="{task_id}"/>
    </get_reports>
    '''
    
    response = requests.post(f'{url}/get_reports', data=report_request, headers=headers)
    root = ET.fromstring(response.text)
    
    report_status = root.find('.//status').text
    if report_status == '200':
        report_content = root.find('.//report').text
        print("Vulnerability Report:")
        print(report_content)

        # Save the report to a JSON file
        with open('openvas_scan_results.json', 'w') as json_file:
            json.dump({'report': report_content}, json_file)
        print("Report saved to openvas_scan_results.json")
    else:
        print(f"Failed to retrieve report: {root.find('.//status_text').text}")

# New function to encapsulate the entire process
def run_openvas_scan():
    gvm_url = input("Enter the GVM API URL (e.g., http://localhost:9390): ")
    gvm_username = input("Enter GVM username: ")
    gvm_password = input("Enter GVM password: ")
    target_id = input("Enter the target ID for the scan: ")

    # Login and get the token
    token = gvm_login(gvm_url, gvm_username, gvm_password)
    
    if token:
        # Start the scan
        task_id = start_openvas_scan(gvm_url, token, target_id)
        
        if task_id:
            # Wait for the scan to complete
            if check_scan_status(gvm_url, token, task_id):
                # Get the scan report
                get_scan_report(gvm_url, token, task_id)

# Main script execution
if __name__ == '__main__':
    run_openvas_scan()
